import random
import string
from openai import OpenAI
from dotenv import load_dotenv
import os


class Perturbation:
    """Base class for random perturbations."""

    def __init__(self, q):
        self.q = q
        self.alphabet = string.printable


class RandomSwapPerturbation(Perturbation):
    """Implementation of random swap perturbations.
    See `RandomSwapPerturbation` in lines 1-5 of Algorithm 2."""

    def __init__(self, q):
        super(RandomSwapPerturbation, self).__init__(q)

    def __call__(self, s):
        list_s = list(s)
        sampled_indices = random.sample(range(len(s)), int(len(s) * self.q / 100))
        for i in sampled_indices:
            list_s[i] = random.choice(self.alphabet)
        return "".join(list_s)


class RandomPatchPerturbation(Perturbation):
    """Implementation of random patch perturbations.
    See `RandomPatchPerturbation` in lines 6-10 of Algorithm 2."""

    def __init__(self, q):
        super(RandomPatchPerturbation, self).__init__(q)

    def __call__(self, s):
        list_s = list(s)
        substring_width = int(len(s) * self.q / 100)
        max_start = len(s) - substring_width
        start_index = random.randint(0, max_start)
        sampled_chars = "".join(
            [random.choice(self.alphabet) for _ in range(substring_width)]
        )
        list_s[start_index : start_index + substring_width] = sampled_chars
        return "".join(list_s)


class RandomInsertPerturbation(Perturbation):
    """Implementation of random insert perturbations.
    See `RandomPatchPerturbation` in lines 11-17 of Algorithm 2."""

    def __init__(self, q):
        super(RandomInsertPerturbation, self).__init__(q)

    def __call__(self, s):
        list_s = list(s)
        sampled_indices = random.sample(range(len(s)), int(len(s) * self.q / 100))
        for i in sampled_indices:
            list_s.insert(i, random.choice(self.alphabet))
        return "".join(list_s)


class GPTParaphrasePerturbation(Perturbation):
    """Implementation of a GPT-based paraphrasing perturbation."""

    def __init__(
        self,
        paraphrase_temperature,
        paraphrase_model_name="gpt-3.5-turbo",
        paraphrase_max_tokens=100,
        prompt="Paraphrase this text: ",
    ):
        """
        Initializes the GPT-based paraphrase perturbation.

        Args:
            paraphrase_model_name (str): The model name for the GPT paraphrase model.
            paraphrase_temperature (float): Temperature for sampling (controls randomness).
            paraphrase_max_tokens (int): Maximum number of tokens in the output.
            prompt (str): Prompt for guiding GPT to paraphrase the input text.
        """
        super(GPTParaphrasePerturbation, self).__init__(paraphrase_temperature/100)
        self.paraphrase_model_name = paraphrase_model_name
        self.paraphrase_temperature = paraphrase_temperature/100
        self.paraphrase_max_tokens = paraphrase_max_tokens
        self.prompt = prompt

        load_dotenv()

        # Try to set up OpenAI client
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError(
                "API key for OpenAI is missing. Please set it in the .env file or environment variables."
            )
        self.client = OpenAI()

    def __call__(self, original_text):
        """
        Generates a paraphrase of the given text using the GPT model.

        Args:
            original_text (str): The text to paraphrase.

        Returns:
            str: The paraphrased text generated by GPT.
        """
        # Format message for OpenAI API
        messages = [{"role": "user", "content": self.prompt + original_text}]
        completion = self.client.chat.completions.create(
            model=self.paraphrase_model_name, messages=messages, temperature=self.paraphrase_temperature, max_tokens=self.paraphrase_max_tokens
        )
        return str(completion.choices[0].message.content)
